apiVersion: v1
kind: ConfigMap
metadata:
  name: password-generator-k6-script
  namespace: default
data:
  loadtest.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';

    export const options = {
      scenarios: {
        password_generator: {
          executor: 'constant-arrival-rate',
          rate: 100,
          timeUnit: '1s',
          duration: '600s',
          preAllocatedVUs: 100,
          maxVUs: 200,
        },
      },
    };

    export default function () {
      const response = http.get('http://password-generator-app.default.svc.cluster.local:3000/app/generate-password?length=12&numbers=true&symbols=true');
      check(response, {
        'status is 200': (r) => r.status === 200,
      });
      sleep(1);
    }
---
apiVersion: k6.io/v1alpha1
kind: TestRun
metadata:
  name: k6-loadtest
  namespace: default
  annotations:
    instrumentation.opentelemetry.io/inject-nodejs: 'true'
spec:
  parallelism: 1
  script:
    configMap:
      name: password-generator-k6-script
      file: loadtest.js
  runner:
    image: grafana/k6:latest
    env:
      - name: K6_ENABLE_OTEL
        value: "true"
      - name: K6_OTEL_EXPORTER_OTLP_ENDPOINT
        value: "http://trace-collector.monitoring.svc.cluster.local:4317"
      - name: K6_OTEL_RESOURCE_ATTRIBUTES
        value: "service.name=k6-loadtest,service.instance.id=k6-instance-1"
      - name: K6_OTEL_PROPAGATORS
        value: "tracecontext,baggage"
      - name: K6_OTEL_SAMPLER_TYPE
        value: "parentbased_traceidratio"
      - name: K6_OTEL_SAMPLER_ARGUMENT
        value: "1"
      - name: K6_PROMETHEUS_RW_SERVER_URL
        value: "http://trace-collector.monitoring.svc.cluster.local:4317"
      - name: K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM
        value: "true"
---
